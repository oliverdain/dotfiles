- name: Setup the ngrok apt repo
  deb822_repository:
    name: ngrok
    types: deb
    uris: https://ngrok-agent.s3.amazonaws.com
    # out of date for Bookworm but that's what they've got and it seems to work
    suites: buster
    components:
      - main
    signed_by: https://ngrok-agent.s3.amazonaws.com/ngrok.asc
    state: present
  become: true
- name: Setup the Syncthing apt repo
  deb822_repository:
    name: syncthing
    types: deb
    uris: https://apt.syncthing.net
    signed_by: https://syncthing.net/release-key.gpg
    suites: syncthing
    components:
      - stable
    state: present
  become: true
- name: use syncthing from their repo, not the official repo
  copy:
    dest: /etc/apt/preferences.d/syncthing.pref
    content: |
      Package: *
      Pin: origin apt.syncthing.net
      Pin-Priority: 990
  become: true
- name: install some standard packages
  apt:
     update_cache: true
     pkg:
       - curl
       - ripgrep
       - fd-find
       - ranger
       - htop
       - python3-pynvim
       - xclip
       - httpie
       - tldr
       - tig
       - ffmpeg
       - mpv
       - ngrok
       - syncthing
       # python3-dev installs the Python headers and things which my vimspector setup needs to install debugpy.
       - python3-dev
       - buildah
       - podman
  become: true
  tags: [ std-pkg ]
- name: symlink fdfind to fd
  file:
    src: /usr/bin/fdfind
    dest: /usr/bin/fd
    state: link
  become: true
- name: See if neovim is installed
  stat:
     path: "{{ nvim_path }}"
  register: nvim_stat
- name: Install neovim
  block:
    - name: Download the neovim appimg
      get_url:
        url: "https://github.com/neovim/neovim/releases/download/{{ nvim_version}}/nvim-linux-x86_64.appimage"
        dest: "{{ nvim_path }}"
    - name: Make nvim executable
      file:
        path: "{{ nvim_path }}"
        state: touch
        mode: u+x
  when: not nvim_stat.stat.exists
- name: See if neovide is installed
  stat:
    path: "{{ neovide_path }}"
  register: nveovide_stat
- name: install neovide
  block:
    - name: download neovide appimg
      get_url:
        url: "https://github.com/neovide/neovide/releases/download/{{ neovide_version }}/neovide.AppImage"
        dest: "{{ neovide_path }}"
    - name: make neovide executable
      file:
        path: "{{ neovide_path }}"
        state: touch
        mode: u+x
  when: not nveovide_stat.stat.exists
- name: Check if Volta is installed
  stat:
    path: "{{ volta_dir }}"
  register: volta_stat
- name: check volta version
  command: $HOME/.volta/bin/volta --version
  register: volta_ver
  when: volta_stat.stat.exists
- name: Install Volta
  # We skip the setup here so that we can have Ansible manage the changing of the profile scripts (see next step)
  shell: "curl https://get.volta.sh | bash -s -- --version {{ volta_version }} --skip-setup"
  when: not volta_stat.stat.exists or volta_ver.stdout != volta_version
# The main reason we use volta is to install a recent version of node.js for neovim to use.
- name: configure volta for nvim
  block:
    - name: install nodejs
      command: $HOME/.volta/bin/volta install node@22
- name: See if lakectl is installed
  stat:
    path: ~/bin/lakectl
  register: lakectl_stat
  tags: [ lakectl ]
- name: See if lakectl is the right version
  command: ~/bin/lakectl --version
  register: lake_version_reg
  when: lakectl_stat.stat.exists
  tags: [ lakectl ]
# Now we have to parse the output of lakectl --version. If we don't find the right version the result will be the
# *string* -1. If we didn't even have lakectl installed at all we set the same fact to -1 below so that we know we need
# to install it if lake_version_correct == "-1".
- name: Extract lakectl version from stdout string
  set_fact:
    lake_version_correct: "{{ lake_version_reg.stdout.find('lakectl version: ' ~ lakefs_version ~ '\n') }}"
  when: lakectl_stat.stat.exists
  tags: [ lakectl ]
- name: Set lake_version_correct to -1 if lakectl isn't found at all
  set_fact:
    lake_version_correct: "-1"
  when: not lakectl_stat.stat.exists
  tags: [ lakectl ]
- name: Install lakefs CLI
  block:
    - name: Download lakefs tarball
      get_url:
        url: "https://github.com/treeverse/lakeFS/releases/download/v{{ lakefs_version }}/lakeFS_{{ lakefs_version }}_Linux_x86_64.tar.gz"
        dest: /tmp/lakefs.tar.gz
    - name: Extract lakefs cli
      unarchive:
        src: /tmp/lakefs.tar.gz
        include: lakectl
        dest: ~/bin
  when: lake_version_correct == "-1"
  tags: [ lakectl ]
- name: see if k9s is installed
  stat:
    path: /usr/bin/k9s
  register: k9s_stat
- name: install k9s TUI
  apt:
    deb: https://github.com/derailed/k9s/releases/latest/download/k9s_linux_amd64.deb
  become: true
  when: not k9s_stat.stat.exists
# Kubeswitch requires a tiny bit of bash to set up the shell function. That's already in my .bashrc in yadm so no need
# to do anything else here.
- name: see if kubeswitch is installed
  stat:
    path: ~/bin/switcher
  register: kubeswitch_stat
- name: install kubeswitch
  block:
    - name: download latest version of kubeswitch
      get_url:
        url: https://github.com/danielfoehrKn/kubeswitch/releases/latest/download/switcher_linux_amd64
        dest: ~/bin/switcher
    - name: make switcher executable
      file:
        path: ~/bin/switcher
        state: touch
        mode: u+x
  when: not kubeswitch_stat.stat.exists
- name: See if rclone is installed
  stat:
    path: /usr/bin/rclone
  register: rclone_stat
- name: Install rclone
  apt:
    deb: https://github.com/rclone/rclone/releases/download/v1.65.2/rclone-v1.65.2-linux-amd64.deb
  become: true
  when: not rclone_stat.stat.exists
# Debian ships with a very old version of fzf so we install the latest manually.
- name: see if fzf is installed
  stat:
    path: /usr/local/bin/fzf
  register: fzf_stat
- name: install the latest version of fzf
  block:
    - name: download fzf
      get_url:
        url: https://github.com/junegunn/fzf/releases/download/v0.55.0/fzf-0.55.0-linux_amd64.tar.gz
        dest: /tmp/fzf.tar.gz
    - name: extract fzf
      unarchive:
        src: /tmp/fzf.tar.gz
        include: fzf
        dest: /usr/local/bin
      become: true
  when: not fzf_stat.stat.exists
- name: get golang version
  command: /usr/local/go/bin/go version
  register: golang_check
  ignore_errors: true
  tags: [go]
- name: Download and install golang
  block:
    - name: Download golang
      get_url:
        url: https://golang.org/dl/{{go_version}}.linux-amd64.tar.gz
        dest: /tmp/{{go_version}}.tar.gz
    - name: remove any old versions of go
      file:
        path: /usr/local/go
        state: absent
      become: true
    - name: extract the golang tarball
      unarchive:
        src: /tmp/{{go_version}}.tar.gz
        dest: /usr/local
      become: true
  when: golang_check.rc != 0 or go_version not in golang_check.stdout
  tags: [go]
- name: add go to the $PATH
  blockinfile:
    path: ~/.profile
    marker: "# {mark} ANSIBLE MANAGED for golang"
    block: export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    create: true
  tags: [go]

